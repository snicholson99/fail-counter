{"version":3,"sources":["Counter.js","serviceWorker.js","index.js"],"names":["Counter","props","handleAddOne","bind","handleMinusOne","handleReset","state","count","stringCount","localStorage","getItem","parseInt","isNaN","this","setState","prevProps","prevState","setItem","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAqEeA,G,wDAjEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,MAAQ,CACXC,MAAO,GANQ,E,gEAUjB,IAAMC,EAAcC,aAAaC,QAAQ,SACnCH,EAAQI,SAASH,EAAa,IAE/BI,MAAML,IACTM,KAAKC,UAAS,iBAAO,CAAEP,c,yCAIRQ,EAAWC,GACxBA,EAAUT,QAAUM,KAAKP,MAAMC,OACjCE,aAAaQ,QAAQ,QAASJ,KAAKP,MAAMC,S,qCAK3CM,KAAKC,UAAS,SAAAE,GACZ,MAAO,CACLT,MAAOS,EAAUT,MAAQ,Q,uCAM7BM,KAAKC,UAAS,SAAAE,GACZ,MAAO,CACLT,MAAOS,EAAUT,MAAQ,Q,oCAM7BM,KAAKC,UAAS,WACZ,MAAO,CACLP,MAAO,Q,+BAKX,OACE,yBAAKW,UAAU,qBACb,iEACA,wBAAIA,UAAU,kBAAkBL,KAAKP,MAAMC,OAC3C,yBAAKW,UAAU,oBACb,4BAAQC,QAASN,KAAKT,gBAAtB,MACA,4BAAQe,QAASN,KAAKX,cAAtB,OAEF,yBAAKgB,UAAU,mBACb,sDACA,4BAAQC,QAASN,KAAKR,aAAtB,e,GA3DYe,cCSFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.244a3aab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './Counter.css';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAddOne = this.handleAddOne.bind(this);\n    this.handleMinusOne = this.handleMinusOne.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.state = {\n      count: 0\n    };\n  }\n  componentDidMount() {\n    const stringCount = localStorage.getItem(\"count\");\n    const count = parseInt(stringCount, 10);\n\n    if (!isNaN(count)) {\n      this.setState(() => ({ count }));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.count !== this.state.count) {\n      localStorage.setItem(\"count\", this.state.count);\n    }\n  }\n\n  handleAddOne() {\n    this.setState(prevState => {\n      return {\n        count: prevState.count + 1\n      };\n    });\n  }\n\n  handleMinusOne() {\n    this.setState(prevState => {\n      return {\n        count: prevState.count - 1\n      };\n    });\n  }\n\n  handleReset() {\n    this.setState(() => {\n      return {\n        count: 0\n      };\n    });\n  }\n  render() {\n    return (\n      <div className=\"counter-container\">\n        <h1>\"It worked on my machine\" counter</h1>\n        <h2 className=\"counter-number\">{this.state.count}</h2>\n        <div className=\"button-container\">\n          <button onClick={this.handleMinusOne}>-1</button>\n          <button onClick={this.handleAddOne}>+1</button>\n        </div>\n        <div className=\"reset-container\">\n          <p>Stored in local storage</p>\n          <button onClick={this.handleReset}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Counter from './Counter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}